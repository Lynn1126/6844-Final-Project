// <auto-generated />
using System;
using CardTradeHub.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CardTradeHub.Migrations
{
    [DbContext(typeof(CardTradeHubContext))]
    partial class CardTradeHubContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.3");

            modelBuilder.Entity("CardTradeHub.Models.Card", b =>
                {
                    b.Property<int>("CardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ListedDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CardID");

                    b.HasIndex("UserID");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            CardID = 1,
                            Category = "Pokemon",
                            Condition = "Mint",
                            Description = "2019 Pikachu Pokemon Center Kyoto",
                            ImageUrl = "/images/cards/pikachu.jpg",
                            ListedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Price = 200.00m,
                            Status = "Available",
                            Title = "Pikachu Pokemon Center Kyoto",
                            UserID = "22222222-2222-2222-2222-222222222222"
                        },
                        new
                        {
                            CardID = 2,
                            Category = "Basketball",
                            Condition = "Good",
                            Description = "Kobe Bryant 2012-13 Limited Auto",
                            ImageUrl = "/images/cards/kobe1.jpg",
                            ListedDate = new DateTime(2024, 1, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            Price = 3000.00m,
                            Status = "Available",
                            Title = "Kobe Bryant 2012-13 Limited Auto",
                            UserID = "22222222-2222-2222-2222-222222222222"
                        },
                        new
                        {
                            CardID = 3,
                            Category = "Football",
                            Condition = "Excellent",
                            Description = "2014 Prizm World Cup Lionel Messi Auto PSA 10",
                            ImageUrl = "/images/cards/messi.jpg",
                            ListedDate = new DateTime(2024, 1, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            Price = 5000.00m,
                            Status = "Available",
                            Title = "2014 Prizm World Cup Lionel Messi Auto PSA 10",
                            UserID = "22222222-2222-2222-2222-222222222222"
                        },
                        new
                        {
                            CardID = 4,
                            Category = "Basketball",
                            Condition = "Near Mint",
                            Description = "Yao Ming 2016-17 Panini Flawless Autograph",
                            ImageUrl = "/images/cards/yao.jpg",
                            ListedDate = new DateTime(2024, 1, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            Price = 1000.00m,
                            Status = "Available",
                            Title = "Yao Ming 2016-17 Panini Flawless Autograph",
                            UserID = "22222222-2222-2222-2222-222222222222"
                        },
                        new
                        {
                            CardID = 5,
                            Category = "Magic: The Gathering",
                            Condition = "Good",
                            Description = "1993 Unlimited Black Lotus R",
                            ImageUrl = "/images/cards/blacklotus.jpg",
                            ListedDate = new DateTime(2024, 1, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Price = 3000.00m,
                            Status = "Available",
                            Title = "Black Lotus R",
                            UserID = "22222222-2222-2222-2222-222222222222"
                        },
                        new
                        {
                            CardID = 6,
                            Category = "Basketball",
                            Condition = "Near Mint",
                            Description = "National Treasures Kevin Durant Auto USA",
                            ImageUrl = "/images/cards/durant.jpg",
                            ListedDate = new DateTime(2024, 1, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            Price = 1500.00m,
                            Status = "Available",
                            Title = "National Treasures Kevin Durant Auto USA",
                            UserID = "22222222-2222-2222-2222-222222222222"
                        },
                        new
                        {
                            CardID = 7,
                            Category = "Baseball",
                            Condition = "Good",
                            Description = "2019 Topps Chrome Shohei Ohtani",
                            ImageUrl = "/images/cards/shohei.jpg",
                            ListedDate = new DateTime(2024, 1, 7, 0, 0, 0, 0, DateTimeKind.Utc),
                            Price = 50.00m,
                            Status = "Available",
                            Title = "Shohei Ohtani Topps Chrome",
                            UserID = "22222222-2222-2222-2222-222222222222"
                        },
                        new
                        {
                            CardID = 8,
                            Category = "Football",
                            Condition = "Excellent",
                            Description = "2022-23 Panini Eminence David Beckham Autograph",
                            ImageUrl = "/images/cards/beckham.jpg",
                            ListedDate = new DateTime(2024, 1, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Price = 1000.00m,
                            Status = "Available",
                            Title = "David Beckham Autograph Card",
                            UserID = "22222222-2222-2222-2222-222222222222"
                        },
                        new
                        {
                            CardID = 9,
                            Category = "Yu-Gi-Oh",
                            Condition = "Near Mint",
                            Description = "Red Eyes Black Dragon PSA 10",
                            ImageUrl = "/images/cards/bluedragon.jpg",
                            ListedDate = new DateTime(2024, 1, 9, 0, 0, 0, 0, DateTimeKind.Utc),
                            Price = 8000.00m,
                            Status = "Available",
                            Title = "Red Eyes Black Dragon",
                            UserID = "22222222-2222-2222-2222-222222222222"
                        },
                        new
                        {
                            CardID = 10,
                            Category = "Basketball",
                            Condition = "Mint",
                            Description = "Kobe Bryant Gold Standard Superscribe Autograph",
                            ImageUrl = "/images/cards/kobe2.jpg",
                            ListedDate = new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Price = 1500.00m,
                            Status = "Available",
                            Title = "Kobe Bryant Gold Standard Superscribe",
                            UserID = "22222222-2222-2222-2222-222222222222"
                        },
                        new
                        {
                            CardID = 11,
                            Category = "Pokemon",
                            Condition = "Mint",
                            Description = "Shining Mewtwo GX Rainbow Rare card",
                            ImageUrl = "/images/cards/mewtwo-gx.jpg",
                            ListedDate = new DateTime(2024, 1, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Price = 300.00m,
                            Status = "Available",
                            Title = "Mewtwo GX Rainbow Rare",
                            UserID = "22222222-2222-2222-2222-222222222222"
                        },
                        new
                        {
                            CardID = 12,
                            Category = "Baseball",
                            Condition = "Good",
                            Description = "2021 Topps Definitive Juan Soto Autograph Card",
                            ImageUrl = "/images/cards/soto.jpg",
                            ListedDate = new DateTime(2024, 1, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            Price = 2000.00m,
                            Status = "Available",
                            Title = "Juan Soto Autograph Card",
                            UserID = "22222222-2222-2222-2222-222222222222"
                        },
                        new
                        {
                            CardID = 13,
                            Category = "Magic: The Gathering",
                            Condition = "Excellent",
                            Description = "Beta Edition Mox Sapphire",
                            ImageUrl = "/images/cards/mox-sapphire.jpg",
                            ListedDate = new DateTime(2024, 1, 13, 0, 0, 0, 0, DateTimeKind.Utc),
                            Price = 4000.00m,
                            Status = "Available",
                            Title = "Mox Sapphire",
                            UserID = "22222222-2222-2222-2222-222222222222"
                        },
                        new
                        {
                            CardID = 14,
                            Category = "Basketball",
                            Condition = "Near Mint",
                            Description = "2020-21 Kobe Bryant Hoops Slam",
                            ImageUrl = "/images/cards/kobe3.jpg",
                            ListedDate = new DateTime(2024, 1, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Price = 500.00m,
                            Status = "Available",
                            Title = "Kobe Bryant Hoops Slam",
                            UserID = "22222222-2222-2222-2222-222222222222"
                        },
                        new
                        {
                            CardID = 15,
                            Category = "Yu-Gi-Oh",
                            Condition = "Mint",
                            Description = "First Edition Dark Magician Girl",
                            ImageUrl = "/images/cards/dark-magician-girl.jpg",
                            ListedDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Price = 400.00m,
                            Status = "Available",
                            Title = "Dark Magician Girl",
                            UserID = "22222222-2222-2222-2222-222222222222"
                        },
                        new
                        {
                            CardID = 16,
                            Category = "Hockey",
                            Condition = "Good",
                            Description = "1979 O-Pee-Chee Wayne Gretzky Rookie Card",
                            ImageUrl = "/images/cards/gretzky-rookie.jpg",
                            ListedDate = new DateTime(2024, 1, 16, 0, 0, 0, 0, DateTimeKind.Utc),
                            Price = 9000.00m,
                            Status = "Available",
                            Title = "Wayne Gretzky Rookie",
                            UserID = "22222222-2222-2222-2222-222222222222"
                        },
                        new
                        {
                            CardID = 17,
                            Category = "Pokemon",
                            Condition = "Mint",
                            Description = "Pokemon Lillie Full Art PSA 10",
                            ImageUrl = "/images/cards/lillie.jpg",
                            ListedDate = new DateTime(2024, 1, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            Price = 200.00m,
                            Status = "Available",
                            Title = "Lillie Full Art PSA 10",
                            UserID = "22222222-2222-2222-2222-222222222222"
                        },
                        new
                        {
                            CardID = 18,
                            Category = "Basketball",
                            Condition = "Excellent",
                            Description = "Kareem Abdul-Jabbar Unparalleled Autograph",
                            ImageUrl = "/images/cards/jabbar.jpg",
                            ListedDate = new DateTime(2024, 1, 18, 0, 0, 0, 0, DateTimeKind.Utc),
                            Price = 3500.00m,
                            Status = "Available",
                            Title = "Kareem Abdul-Jabbar Unparalleled Autograph",
                            UserID = "22222222-2222-2222-2222-222222222222"
                        },
                        new
                        {
                            CardID = 19,
                            Category = "Baseball",
                            Condition = "Good",
                            Description = "Topps Chrome Juan Soto Rookie Card PSA 10",
                            ImageUrl = "/images/cards/soto2.jpg",
                            ListedDate = new DateTime(2024, 1, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            Price = 400.00m,
                            Status = "Available",
                            Title = "Juan Soto Rookie Card",
                            UserID = "22222222-2222-2222-2222-222222222222"
                        },
                        new
                        {
                            CardID = 20,
                            Category = "Basketball",
                            Condition = "Near Mint",
                            Description = "Stephen Curry 2018-19 Immaculate Moments",
                            ImageUrl = "/images/cards/curry.jpg",
                            ListedDate = new DateTime(2024, 1, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            Price = 2600.00m,
                            Status = "Available",
                            Title = "Stephen Curry 2018-19 Immaculate Moments",
                            UserID = "22222222-2222-2222-2222-222222222222"
                        });
                });

            modelBuilder.Entity("CardTradeHub.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BuyerID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CardID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DisputeDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisputeReason")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DisputeStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasDispute")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SellerID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionReference")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TransactionID");

                    b.HasIndex("BuyerID");

                    b.HasIndex("CardID");

                    b.HasIndex("SellerID");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("CardTradeHub.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Customer");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "11111111-1111-1111-1111-111111111111",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b6f0dec4-b812-48b1-8292-f876b5c7fc37",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@cardtradehub.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            LastLoginDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@CARDTRADEHUB.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEOq0p+6TeGu1Bwq3dcJ1Gn7X0ZAjNgvOTfb16Czq19IbXOCK0Gd5zrjT+Hh5MamlQQ==",
                            PhoneNumberConfirmed = false,
                            RegisterDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Role = "Admin",
                            SecurityStamp = "93322686-36c9-4d8f-b1ec-1e12627cc086",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "22222222-2222-2222-2222-222222222222",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8e7da82e-31b2-4024-9959-d92d84093782",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "seller@cardtradehub.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            LastLoginDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LockoutEnabled = false,
                            NormalizedEmail = "SELLER@CARDTRADEHUB.COM",
                            NormalizedUserName = "SELLER",
                            PasswordHash = "AQAAAAIAAYagAAAAENaBrcsUVIXEy8DNgHSK0nqwz+XfC1nUdt/kmRQKgIUWWANol2qImlK6898fxI4o9A==",
                            PhoneNumberConfirmed = false,
                            RegisterDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Role = "User",
                            SecurityStamp = "54e6c626-f42e-4c8b-8338-40df8f16623d",
                            TwoFactorEnabled = false,
                            UserName = "seller"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CardTradeHub.Models.Card", b =>
                {
                    b.HasOne("CardTradeHub.Models.User", "User")
                        .WithMany("Cards")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CardTradeHub.Models.Transaction", b =>
                {
                    b.HasOne("CardTradeHub.Models.User", "Buyer")
                        .WithMany("Transactions")
                        .HasForeignKey("BuyerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CardTradeHub.Models.Card", "Card")
                        .WithMany("Transactions")
                        .HasForeignKey("CardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardTradeHub.Models.User", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Card");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CardTradeHub.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CardTradeHub.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardTradeHub.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CardTradeHub.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CardTradeHub.Models.Card", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("CardTradeHub.Models.User", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
